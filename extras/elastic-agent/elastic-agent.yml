# ================================ General =====================================
# Beats is configured under Fleet, you can define most settings
# from the Kibana UI. You can update this file to configure the settings that
# are not supported by Fleet.
fleet:
  enabled: true

xpack.monitoring.enabled: false
monitoring:
  enabled: false
  cluster_uuid: "${CLUSTER_UUID}"

# agent.download:
#   # source of the artifacts, requires elastic like structure and naming of the binaries
#   # e.g /windows-x86.zip
#   sourceURI: "https://artifacts.elastic.co/downloads/beats/"
#   # path to the directory containing downloaded packages
#   target_directory: "${path.data}/downloads"
#   # timeout for downloading package
#   timeout: 120s
#   # file path to a public key used for verifying downloaded artifacts
#   # if not file is present Elastic Agent will try to load public key from elastic.co website.
#   pgpfile: "${path.data}/elastic.pgp"
#   # install_path describes the location of installed packages/programs. It is also used
#   # for reading program specifications.
#   install_path: "${path.data}/install"

# agent.process:
#   # minimal port number for spawned processes
#   min_port: 10000
#   # maximum port number for spawned processes
#   max_port: 30000
#   # timeout for creating new processes. when process is not successfully created by this timeout
#   # start operation is considered a failure
#   spawn_timeout: 30s

# agent.retry:
#   # enabled determines whether retry is possible. Default is false.
#   enabled: true
#   # retries_count specifies number of retries. Default is 3.
#   # Retry count of 1 means it will be retried one time after one failure.
#   retries_count: 3
#   # delay specifies delay in ms between retries. Default is 30s
#   delay: 30s
#   # max_delay specifies maximum delay in ms between retries. Default is 300s
#   max_delay: 5m
#   # Exponential determines whether delay is treated as exponential.
#   # With 30s delay and 3 retries: 30, 60, 120s
#   # Default is false
#   exponential: false
#
#curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.4.3-amd64.deb
#sudo dpkg -i elastic-agent-8.4.3-amd64.deb
#sudo elastic-agent enroll \
#  --fleet-server-es=https://es01:9200 \
#  --fleet-server-service-token=<censored> \
#  --fleet-server-policy=fleet-server-policy
#sudo systemctl enable elastic-agent
#sudo systemctl start elastic-agent
#
#
#curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.4.3-linux-x86_64.tar.gz
#tar xzvf elastic-agent-8.4.3-linux-x86_64.tar.gz
#cd elastic-agent-8.4.3-linux-x86_64
#sudo ./elastic-agent install --url=https://localhost:8220 \
#  --fleet-server-es=https://es01:9200 \
#  --fleet-server-service-token=<censored> \
#  --fleet-server-policy=fleet-server-policy \
#  --certificate-authorities=<PATH_TO_CA> \
#  --fleet-server-es-ca=<PATH_TO_ES_CERT> \
#  --fleet-server-cert=<PATH_TO_FLEET_SERVER_CERT> \
#  --fleet-server-cert-key=<PATH_TO_FLEET_SERVER_CERT_KEY>
#

outputs:
  default:
    type: elasticsearch
    hosts:
      - 'https://es01.${APP_HOST}.${APP_NET}:9200'
      - 'https://es02.${APP_HOST}.${APP_NET}:9201'
    username: ${FLEET_SERVER_ELASTICSEARCH_USERNAME}
    password: ${FLEET_SERVER_ELASTICSEARCH_PASSWORD}
    service_token: ${FLEET_SERVER_SERVICE_TOKEN}
    api_key: ${FLEET_ENROLLMENT_TOKEN}
    ssl:
      enabled: true
      certificate_authorities:
        - ${ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES}
      verification_mode: certificate
