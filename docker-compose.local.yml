version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  # local network:
  intnet:
    external: false
    name: ${INT_NETWORK}

services:
  webwp:
    # Alpine WORDPRESS
    # image: lhsradek/lhsdock:v3
    image: nginx:alpine
    container_name: "${APP_ID}-webwp"
    # hostname: "webwp"
    hostname: "webwp.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    # ports:
    #  - 80:80
    #  - 4443:443
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      - wordpress:/var/www/html/wp:rw
      - phpmyadmin:/var/www/html/pma:rw
      - ./logs/wordpress-nginx:/var/log/nginx:rw
      # for http
      - ./extras/nginx/default-http.conf:/etc/nginx/conf.d/default.conf:ro
      # for https
      # - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      # for ssl
      # - ./certs/${CERTNAME}.pem:/etc/ssl/private/cacert.pem:ro
      # - ./certs/${CERTNAME}-key.pem:/etc/ssl/private/cacert-key.pem:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.webwp-${NUM}-public.rule=Host(`${APP_HOST}`, `${WP_PHP_MY_ADMIN_HOST}`)"
      - "traefik.http.routers.webwp-${NUM}-public.entrypoints=https"
      - "traefik.http.routers.webwp-${NUM}-public.tls=true"
      # for https
      # - "traefik.http.services.webwp-platypus-${NAME}-mysql.loadbalancer.server.scheme=https"
      # - "traefik.http.services.webwp-platypus-${NAME}-mysql.loadbalancer.server.port=443"

  webwp-php:
    # Alpine WORDPRESS-php
    image: wordpress:fpm-alpine
    container_name: "${APP_ID}-webwp-php"
    # hostname: "webwp-php"
    hostname: "webwp-php.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - WORDPRESS_DB_HOST=db.${INT_NETWORK}
      - WORDPRESS_DB_NAME=${APP_ID}
      - WORDPRESS_DB_USER=${APP_ID}
      - WORDPRESS_DB_PASSWORD=${WP_DB_PASSWORD}
      #  define( 'MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL );
      - |
        WORDPRESS_CONFIG_EXTRA=
        define( 'WP_HOME', "${WP_HOME}" );
        define( 'WP_SITEURL', "${WP_HOME}" );
        define( 'WP_ENVIRONMENT_TYPE', "${ENVIRONMENT_TYPE}" );
        define( 'WP_REDIS_HOST', "redis" );
    networks:
      # local network:
      - intnet
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      - wordpress:/var/www/html:rw
      # - ./certs/rootCA.pem:/var/www/html/wp-includes/certificates/rootCA.pem:ro
      # - ./application/html/favicon.ico:/var/www/html/favicon.ico:rw
      # - ./application/html/phpinfo.php:/var/www/html/phpinfo.php:rw

  webpma-php:
    # Alpine phpMyAdmin-php
    image: phpmyadmin:fpm-alpine
    container_name: "${APP_ID}-webpma-php"
    hostname: "webpma-php.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - PMA_HOST=db.${INT_NETWORK}
      - PMA_ARBITRARY=0
      - UPLOAD_LIMIT=1280M
    networks:
      # local network:
      - intnet
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      - phpmyadmin:/var/www/html:rw
      # for ssl
      # - ./extras/pma/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php:ro
      # - ./certs/rootCA.pem:/etc/phpmyadmin/cacert.pem:ro
      # - ./application/html/phpinfo.php:/var/www/html/phpinfo.php:rw

  db:
    # Ubuntu - db 
    image: mariadb
    container_name: "${APP_ID}-db"
    # hostname: "db"
    hostname: "db.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    # ports:
    #  - 3306:3306
    networks:
      # local network:
      - intnet
    environment:
      MYSQL_ROOT_PASSWORD: ${WP_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${APP_ID}
      MYSQL_USER: ${APP_ID}
      MYSQL_PASSWORD: ${WP_DB_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: "true"
    volumes:
      # - /root/bin/ubuntu:/root/bin/ubuntu:ro
      - mysql:/var/lib/mysql:rw
      - ./logs/wordpress-mysql:/var/log/mysql:rw
      # for ssl
      # - ./extras/etc/mysql/mariadb.conf.d/50-server.cnf:/etc/mysql/mariadb.conf.d/50-server.cnf:ro
      # - ./certs/rootCA.pem:/etc/mysql/cacert.pem:ro
      # - ./certs/${CERTNAME}.pem:/etc/mysql/server-cert.pem:ro
      # - ./certs/${CERTNAME}-key.pem:/etc/mysql/server-key.pem:ro

  redis:
    image: redis:7.0.4-alpine
    # Alpine Linux
    container_name: "${APP_ID}-redis"
    hostname: "redis"
    # hostname: "redis.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # local network:
      - intnet
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    # ports:
    # - 6379:6379
    volumes:
      # -  /root/bin/alpine:/root/bin/alpine:ro
      - ./extras/etc/sysctl.conf:/etc/sysctl.conf:ro
      # - ./extras/var/lib/sysctl.d/00-alpine.conf:/var/lib/sysctl.d/00-alpine.conf:rw
      - redis:/data:rw
      # for ssl
      # - ./certs/rootCA.pem:/etc/ssl/private/cacert.pem:ro
      # - ./certs/${CERTNAME}.pem:/etc/ssl/private/server-cert.pem:ro
      # - ./certs/${CERTNAME}-key.pem:/etc/ssl/private/server-cert-key.pem:ro

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-setup"
    hostname: "setup"
    restart: ${DOCKER_RESTART_POLICY}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./certs/rootCA.pem:/usr/share/elasticsearch/config/certs/rootCA.pem:rw
      - ./certs/${CERTNAME}.pem:/usr/share/elasticsearch/config/certs/cert.pem:rw
      - ./certs/${CERTNAME}-key.pem:/usr/share/elasticsearch/config/certs/cert-key.pem:rw
    networks:
      # for traefik:
      # - default
      # local network:
      - intnet
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01.${APP_HOST}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
      healthcheck:
        test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
        interval: 1s
        timeout: 5s
        retries: 120

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-es01"
    hostname: "es01.${APP_ID}"
    restart: ${DOCKER_RESTART_POLICY}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      # - ./certs/rootCA.pem:/usr/share/elasticsearch/config/certs/rootCA.pem:ro
      # - ./certs/${CERTNAME}.pem:/usr/share/elasticsearch/config/certs/cert.pem:ro
      # - ./certs/${CERTNAME}-key.pem:/usr/share/elasticsearch/config/certs/cert-key.pem:ro
      - es01data:/usr/share/elasticsearch/data
    # ports:
    #  - ${ES_PORT}:9200
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    environment:
      - node.name=es01
      - transport.host=127.0.0.1
      - http.host=0.0.0.0
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.tcp.routers.es01-tcp.tls.passthrough=true"
      - "traefik.tcp.routers.es01-tcp.service=tcp-service"
      - "traefik.tcp.routers.es01-tcp.tls.certresolver=le"
      - "traefik.tcp.routers.es01-tcp.tls.options=myTLSOptions@file"
      - "traefik.tcp.routers.es01-tcp.rule=HostSNI(`es01.${APP_HOST}`)"
      - "traefik.http.services.es01-platypus-${NAME}-mysql.loadbalancer.server.scheme=https"
      - "traefik.http.services.es01-platypus-${NAME}-mysql.loadbalancer.server.port=9200"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

#  kibana:
#    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#    container_name: "${APP_ID}-kibana"
#    hostname: "kibana.${APP_ID}"
#    volumes:
#      - ./certs:/usr/share/kibana/config/certs
#      # - ./certs/rootCA.pem:/usr/share/kibana/config/certs/rootCA.pem:ro
#      # - ./certs/${CERTNAME}.pem:/usr/share/kibana/config/certs/cert.pem:ro
#      # - ./certs/${CERTNAME}-key.pem:/usr/share/kibana/config/certs/cert-key.pem:ro
#      - kibanadata:/usr/share/kibana/data
#    ports:
#      - ${KIBANA_PORT}:5601
#    networks:
#      # for traefik:
#      - default
#      # local network:
#      - intnet
#    environment:
#      - SERVERNAME=kibana
#      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}:9200
#      - ELASTICSEARCH_USERNAME=kibana_system
#      # - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#      - ELASTICSEARCH_PASSWORD=
#      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
#      # - ENTERPRISESEARCH_HOST=http://enterprisesearch:${ENTERPRISE_SEARCH_PORT}
#    # labels:
#    #  - "traefik.enable=true"
#    #  - "traefik.http.routers.kibana-public.entrypoints=https"
#    #  - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}`)"
#    #  - "traefik.http.routers.kibana-public.tls=true"
#    #  - "traefik.tcp.routers.kibana-tcp.tls.certresolver=le"
#    #  - "traefik.tcp.routers.kibana-tcp.tls.options=myTLSOptions@file"
#    #  - "traefik.tcp.routers.kibana-tcp.rule=HostSNI(`kibana.${APP_HOST}`)"
#    #  - "traefik.http.services.kibana-platypus-bedrock.loadbalancer.server.scheme=https"
#    #  - "traefik.http.services.kibana-platypus-bedrock.loadbalancer.server.port=5601"
#    mem_limit: ${MEM_LIMIT}
#    healthcheck:
#      test:
#        [
#            "CMD-SHELL",
#            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
#        ]
#      interval: 10s
#      timeout: 10s
#      retries: 120

volumes:
  wordpress:
    external: true
    name: "${NAME}-wp-${NUM}"
  phpmyadmin:
    external: true
    name: "${NAME}-pma-${NUM}"
  mysql:
    external: true
    name: "${NAME}-db-${NUM}"
  redis:
    external: false
    name: "${NAME}-redis-${NUM}"
  es01data:
    external: false
    name: "${NAME}-es01-${NUM}"
#  kibanadata:
#    external: false
#    name: "${NAME}-bedrock-kibana"
